#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46195
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-11-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "TwoDAverageVariable"
#define MAXFILE_BUILD_DIR  "/tmp/TwoDAverageVariable_MAIA_DFE_SIM"
#define MAXFILE_BUILD_DATE  20180531
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(nxMax, 4096)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 85)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "TwoDAverageVariableKernel.h"
#endif



#ifdef SET_REG_FROM_EQ_V2
#define SET_REG_FROM_EQ_V2_PRESENT 1
SET_REG_FROM_EQ_V2(TwoDAverageVariableKernel, delay_eq_0, (maxfile_max(1, maxfile_min((-2 + GET(TwoDAverageVariableKernel, nxoffset)), 4094)) + -1))
SET_REG_FROM_EQ_V2(TwoDAverageVariableKernel, ce_delay_eq_0, (29 + GET(TwoDAverageVariableKernel, nxoffset)))
SET_REG_FROM_EQ_V2(TwoDAverageVariableKernel, ce_delay_eq_1, (8 + GET(TwoDAverageVariableKernel, nxoffset)))
SET_REG_FROM_EQ_V2(TwoDAverageVariableKernel, ce_delay_eq_2, (8 + GET(TwoDAverageVariableKernel, nxoffset)))
SET_REG_FROM_EQ_V2(TwoDAverageVariableKernel, ce_delay_eq_3, (29 + GET(TwoDAverageVariableKernel, nxoffset)))
#endif

#ifdef ASSERT_EQ_V2
#define ASSERT_EQ_V2_PRESENT 1
ASSERT_EQ_V2(GET(TwoDAverageVariableKernel, nxoffset) <= 4096 && GET(TwoDAverageVariableKernel, nxoffset) >= 3, "Stream offset param 'nxoffset' must be between 3 and 4096 (inclusive).")
ASSERT_EQ_V2(GET(TwoDAverageVariableKernel, nxoffset) <= 4096 && GET(TwoDAverageVariableKernel, nxoffset) >= 3, "Stream offset variable out of range nxoffset{3..4096}")
#endif

#ifdef ASSERT_EQ_V3
#define ASSERT_EQ_V3_PRESENT 1
ASSERT_EQ_V3(TwoDAverageVariableKernel, GET(TwoDAverageVariableKernel, nxoffset) <= 4096 && GET(TwoDAverageVariableKernel, nxoffset) >= 3, "Stream offset param 'nxoffset' must be between 3 and 4096 (inclusive).")
ASSERT_EQ_V3(TwoDAverageVariableKernel, GET(TwoDAverageVariableKernel, nxoffset) <= 4096 && GET(TwoDAverageVariableKernel, nxoffset) >= 3, "Stream offset variable out of range nxoffset{3..4096}")
#endif

#ifdef STREAM_VAR
#define STREAM_VAR_PRESENT 1
STREAM_VAR(TwoDAverageVariableKernel.nxoffset)
#endif

#ifdef STREAM_PARAM
#define STREAM_PARAM_PRESENT 1
STREAM_PARAM(TwoDAverageVariableKernel, nxoffset)
#endif



#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(TwoDAverageVariableKernel, Kernel)
MANAGER_NODE(inStream, PCIe_From_Host)
MANAGER_NODE(outStream, PCIe_To_Host)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_6, DualAspectReg)
MANAGER_NODE(Stream_14, StreamPullPushAdapter)
MANAGER_NODE(Stream_8, Fifo)
MANAGER_NODE(Stream_10, Fifo)
MANAGER_NODE(Stream_12, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(TwoDAverageVariableKernel, inStream, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(TwoDAverageVariableKernel, outStream, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(inStream, inStream, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(outStream, outStream, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_6, input, IN, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_6, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_10, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_12, output, OUT, PCIE, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(inStream, inStream, Stream_8, input, 128)
MANAGER_STREAM(TwoDAverageVariableKernel, outStream, Stream_12, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_10, input, 32)
MANAGER_STREAM(Stream_6, output, Stream_14, input, 128)
MANAGER_STREAM(Stream_14, output, outStream, outStream, 128)
MANAGER_STREAM(Stream_8, output, Stream_1, input, 128)
MANAGER_STREAM(Stream_10, output, TwoDAverageVariableKernel, inStream, 32)
MANAGER_STREAM(Stream_12, output, Stream_6, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(TwoDAverageVariableKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(inStream, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(outStream, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_6, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_8, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(TwoDAverageVariableKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(TwoDAverageVariableKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(TwoDAverageVariableKernel, TwoDAverageVariableKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(TwoDAverageVariableKernel, inStream, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(TwoDAverageVariableKernel, outStream, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(inStream, PCIePushSourceSyncMax4, "inStream")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_8, FifoPushToPullSync, "Stream_8", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, FifoPushToPullSync, "Stream_10", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(TwoDAverageVariableKernel, TwoDAverageVariableKernel, "TwoDAverageVariableKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, FifoPushToPullSync, "Stream_12", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_6, DualAspectRegSync, "Stream_6", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, PullToPushAdapterSync, "Stream_14")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(outStream, PCIePushSinkSyncMax3, "outStream")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 85)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "1b9629e2b7a0a8e4a385e270a56b2f3f2712f6b844709bd32691a7ef1867c55a")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_fill_level, 14, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_flush_level, 14, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_flush_start_level, 14, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_full_level, 14, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(TwoDAverageVariableKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(inStream, STREAM_FROM_HOST, 0)
PCIE_STREAM(outStream, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(TwoDAverageVariableKernel.io_inStream_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.mask0, 0x1, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.mask1, 0x5, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.mask2, 0x9, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.mask3, 0xd, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.mask4, 0x11, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.mask5, 0x15, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.mask6, 0x19, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.mask7, 0x1d, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.mask8, 0x21, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.io_outStream_force_disabled, 0x25, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.run_cycle_count, 0x26, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.delay_eq_0, 0x2c, 2, hwOffsetFix(12, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.ce_delay_eq_0, 0x2e, 2, hwOffsetFix(13, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.ce_delay_eq_1, 0x30, 2, hwOffsetFix(13, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.ce_delay_eq_2, 0x32, 2, hwOffsetFix(13, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.ce_delay_eq_3, 0x34, 2, hwOffsetFix(13, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.current_run_cycle_count, 0x36, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(TwoDAverageVariableKernel.dbg_ctld_almost_empty, 0x3c, 1, hwBits(1))
REG(TwoDAverageVariableKernel.dbg_ctld_done, 0x3d, 1, hwBits(1))
REG(TwoDAverageVariableKernel.dbg_ctld_empty, 0x3e, 1, hwBits(1))
REG(TwoDAverageVariableKernel.dbg_ctld_read, 0x3f, 1, hwBits(1))
REG(TwoDAverageVariableKernel.dbg_ctld_read_pipe_dbg, 0x40, 1, hwBits(3))
REG(TwoDAverageVariableKernel.dbg_ctld_request, 0x41, 1, hwBits(1))
REG(TwoDAverageVariableKernel.dbg_done_out, 0x42, 1, hwBits(1))
REG(TwoDAverageVariableKernel.dbg_fill_level, 0x43, 2, hwBits(14))
REG(TwoDAverageVariableKernel.dbg_flush_level, 0x45, 2, hwBits(14))
REG(TwoDAverageVariableKernel.dbg_flush_start, 0x47, 1, hwBits(1))
REG(TwoDAverageVariableKernel.dbg_flush_start_level, 0x48, 2, hwBits(14))
REG(TwoDAverageVariableKernel.dbg_flushing, 0x4a, 1, hwBits(1))
REG(TwoDAverageVariableKernel.dbg_full_level, 0x4b, 2, hwBits(14))
REG(TwoDAverageVariableKernel.dbg_out_stall, 0x4d, 1, hwBits(1))
REG(TwoDAverageVariableKernel.dbg_out_valid, 0x4e, 1, hwBits(1))
REG(TwoDAverageVariableKernel.dbg_stall_vector, 0x4f, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x50, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x51, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(TwoDAverageVariableKernel.io_inStream_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TwoDAverageVariableKernel.mask0, 0x1, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.mask1, 0x5, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.mask2, 0x9, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.mask3, 0xd, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.mask4, 0x11, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.mask5, 0x15, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.mask6, 0x19, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.mask7, 0x1d, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.mask8, 0x21, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.io_outStream_force_disabled, 0x25, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(TwoDAverageVariableKernel.run_cycle_count, 0x26, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.delay_eq_0, 0x2c, 2, hwOffsetFix(12, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.ce_delay_eq_0, 0x2e, 2, hwOffsetFix(13, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.ce_delay_eq_1, 0x30, 2, hwOffsetFix(13, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.ce_delay_eq_2, 0x32, 2, hwOffsetFix(13, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.ce_delay_eq_3, 0x34, 2, hwOffsetFix(13, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(TwoDAverageVariableKernel.current_run_cycle_count, 0x36, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_ctld_almost_empty, 0x3c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_ctld_done, 0x3d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_ctld_empty, 0x3e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_ctld_read, 0x3f, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_ctld_read_pipe_dbg, 0x40, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_ctld_request, 0x41, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_done_out, 0x42, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_fill_level, 0x43, 2, hwBits(14), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_flush_level, 0x45, 2, hwBits(14), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_flush_start, 0x47, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_flush_start_level, 0x48, 2, hwBits(14), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_flushing, 0x4a, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_full_level, 0x4b, 2, hwBits(14), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_out_stall, 0x4d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_out_valid, 0x4e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(TwoDAverageVariableKernel.dbg_stall_vector, 0x4f, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x50, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x51, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("1b9629e2b7a0a8e4a385e270a56b2f3f2712f6b844709bd32691a7ef1867c55a")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME TwoDAverageVariable
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_TwoDAverageVariable_H
#define SLIC_DECLARATIONS_TwoDAverageVariable_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define TwoDAverageVariable_PCIE_ALIGNMENT (16)
#define TwoDAverageVariable_nxMax (4096)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] offset_TwoDAverageVariableKernel_nxoffset Offset parameter "nxoffset" for kernel "TwoDAverageVariableKernel".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask0 Input scalar parameter "TwoDAverageVariableKernel.mask0".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask1 Input scalar parameter "TwoDAverageVariableKernel.mask1".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask2 Input scalar parameter "TwoDAverageVariableKernel.mask2".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask3 Input scalar parameter "TwoDAverageVariableKernel.mask3".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask4 Input scalar parameter "TwoDAverageVariableKernel.mask4".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask5 Input scalar parameter "TwoDAverageVariableKernel.mask5".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask6 Input scalar parameter "TwoDAverageVariableKernel.mask6".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask7 Input scalar parameter "TwoDAverageVariableKernel.mask7".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask8 Input scalar parameter "TwoDAverageVariableKernel.mask8".
 * \param [in] instream_inStream The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_outStream The stream should be of size (param_N * 4) bytes.
 */
void TwoDAverageVariable(
	int32_t param_N,
	long offset_TwoDAverageVariableKernel_nxoffset,
	uint64_t inscalar_TwoDAverageVariableKernel_mask0,
	uint64_t inscalar_TwoDAverageVariableKernel_mask1,
	uint64_t inscalar_TwoDAverageVariableKernel_mask2,
	uint64_t inscalar_TwoDAverageVariableKernel_mask3,
	uint64_t inscalar_TwoDAverageVariableKernel_mask4,
	uint64_t inscalar_TwoDAverageVariableKernel_mask5,
	uint64_t inscalar_TwoDAverageVariableKernel_mask6,
	uint64_t inscalar_TwoDAverageVariableKernel_mask7,
	uint64_t inscalar_TwoDAverageVariableKernel_mask8,
	const uint32_t *instream_inStream,
	uint32_t *outstream_outStream);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] offset_TwoDAverageVariableKernel_nxoffset Offset parameter "nxoffset" for kernel "TwoDAverageVariableKernel".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask0 Input scalar parameter "TwoDAverageVariableKernel.mask0".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask1 Input scalar parameter "TwoDAverageVariableKernel.mask1".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask2 Input scalar parameter "TwoDAverageVariableKernel.mask2".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask3 Input scalar parameter "TwoDAverageVariableKernel.mask3".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask4 Input scalar parameter "TwoDAverageVariableKernel.mask4".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask5 Input scalar parameter "TwoDAverageVariableKernel.mask5".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask6 Input scalar parameter "TwoDAverageVariableKernel.mask6".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask7 Input scalar parameter "TwoDAverageVariableKernel.mask7".
 * \param [in] inscalar_TwoDAverageVariableKernel_mask8 Input scalar parameter "TwoDAverageVariableKernel.mask8".
 * \param [in] instream_inStream The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_outStream The stream should be of size (param_N * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *TwoDAverageVariable_nonblock(
	int32_t param_N,
	long offset_TwoDAverageVariableKernel_nxoffset,
	uint64_t inscalar_TwoDAverageVariableKernel_mask0,
	uint64_t inscalar_TwoDAverageVariableKernel_mask1,
	uint64_t inscalar_TwoDAverageVariableKernel_mask2,
	uint64_t inscalar_TwoDAverageVariableKernel_mask3,
	uint64_t inscalar_TwoDAverageVariableKernel_mask4,
	uint64_t inscalar_TwoDAverageVariableKernel_mask5,
	uint64_t inscalar_TwoDAverageVariableKernel_mask6,
	uint64_t inscalar_TwoDAverageVariableKernel_mask7,
	uint64_t inscalar_TwoDAverageVariableKernel_mask8,
	const uint32_t *instream_inStream,
	uint32_t *outstream_outStream);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_N; /**<  [in] Interface Parameter "N".: Number of data items to process */
	long offset_TwoDAverageVariableKernel_nxoffset; /**<  [in] Offset parameter "nxoffset" for kernel "TwoDAverageVariableKernel". */
	uint64_t inscalar_TwoDAverageVariableKernel_mask0; /**<  [in] Input scalar parameter "TwoDAverageVariableKernel.mask0". */
	uint64_t inscalar_TwoDAverageVariableKernel_mask1; /**<  [in] Input scalar parameter "TwoDAverageVariableKernel.mask1". */
	uint64_t inscalar_TwoDAverageVariableKernel_mask2; /**<  [in] Input scalar parameter "TwoDAverageVariableKernel.mask2". */
	uint64_t inscalar_TwoDAverageVariableKernel_mask3; /**<  [in] Input scalar parameter "TwoDAverageVariableKernel.mask3". */
	uint64_t inscalar_TwoDAverageVariableKernel_mask4; /**<  [in] Input scalar parameter "TwoDAverageVariableKernel.mask4". */
	uint64_t inscalar_TwoDAverageVariableKernel_mask5; /**<  [in] Input scalar parameter "TwoDAverageVariableKernel.mask5". */
	uint64_t inscalar_TwoDAverageVariableKernel_mask6; /**<  [in] Input scalar parameter "TwoDAverageVariableKernel.mask6". */
	uint64_t inscalar_TwoDAverageVariableKernel_mask7; /**<  [in] Input scalar parameter "TwoDAverageVariableKernel.mask7". */
	uint64_t inscalar_TwoDAverageVariableKernel_mask8; /**<  [in] Input scalar parameter "TwoDAverageVariableKernel.mask8". */
	const uint32_t *instream_inStream; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	uint32_t *outstream_outStream; /**<  [out] The stream should be of size (param_N * 4) bytes. */
} TwoDAverageVariable_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void TwoDAverageVariable_run(
	max_engine_t *engine,
	TwoDAverageVariable_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *TwoDAverageVariable_run_nonblock(
	max_engine_t *engine,
	TwoDAverageVariable_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void TwoDAverageVariable_run_group(max_group_t *group, TwoDAverageVariable_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *TwoDAverageVariable_run_group_nonblock(max_group_t *group, TwoDAverageVariable_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void TwoDAverageVariable_run_array(max_engarray_t *engarray, TwoDAverageVariable_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *TwoDAverageVariable_run_array_nonblock(max_engarray_t *engarray, TwoDAverageVariable_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* TwoDAverageVariable_convert(max_file_t *maxfile, TwoDAverageVariable_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* TwoDAverageVariable_init(void);

/* Error handling functions */
int TwoDAverageVariable_has_errors(void);
const char* TwoDAverageVariable_get_errors(void);
void TwoDAverageVariable_clear_errors(void);
/* Free statically allocated maxfile data */
void TwoDAverageVariable_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int TwoDAverageVariable_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int TwoDAverageVariable_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_TwoDAverageVariable_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 83, NodeInputMappedReg, "Scalar input (io_outStream_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:95)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 84, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:95)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 12, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounterChain(Count.java:498)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:49)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 159, NodeConstantRawBits, "{HWOffsetFix:5, 0, UNSIGNED}\n0x10; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:504)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:51)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 16, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:504)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:51)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 158, NodeConstantRawBits, "{HWOffsetFix:5, 0, UNSIGNED}\n0x10; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:504)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:50)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 14, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:504)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:50)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 157, NodeConstantRawBits, "{HWOffsetFix:4, 0, UNSIGNED}\n0xf; 15.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:54)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 20, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:54)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 112, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 145, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 156, NodeConstantRawBits, "{HWOffsetFix:4, 0, UNSIGNED}\n0xf; 15.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:56)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 24, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:56)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 122, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 147, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 59, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:81)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 109, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 61, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:96)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:81)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 0, NodeInputMappedReg, "Scalar input (io_inStream_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:26)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:26)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 2, NodeInput, "Input(inStream)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:26)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 114, NodeFIFO, "FIFO(12)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 148, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 33, NodeStreamOffset, "stream offset: 1 + nxoffset{3..4096}", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:65)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 11, NodeInputMappedReg, "Scalar input (mask8)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:41)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 60, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:81)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 62, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:81)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 142, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 146, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 57, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:96)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:80)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 32, NodeStreamOffset, "stream offset: nxoffset{3..4096}", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:65)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 10, NodeInputMappedReg, "Scalar input (mask7)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:40)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 56, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:80)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 58, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:80)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 155, NodeConstantRawBits, "{HWOffsetFix:4, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:799)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:55)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 22, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:799)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:55)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 113, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 52, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:79)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 115, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 54, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:96)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:79)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 31, NodeStreamOffset, "stream offset: nxoffset{3..4096} - 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:65)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 9, NodeInputMappedReg, "Scalar input (mask6)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:39)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 53, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:79)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 55, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:79)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 50, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:96)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:78)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 160, NodeInputMappedReg, "Scalar input (delay_eq_0)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 99, NodeFIFO, "FIFO(nxoffset{3..4096})", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 119, NodeFIFO, "FIFO(6)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 150, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 30, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:65)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 8, NodeInputMappedReg, "Scalar input (mask5)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:38)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 49, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:78)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 51, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:78)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 29, NodeStreamOffset, "stream offset: ", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:65)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 7, NodeInputMappedReg, "Scalar input (mask4)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:37)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 48, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:77)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 46, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:96)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:76)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 28, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:65)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 6, NodeInputMappedReg, "Scalar input (mask3)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:36)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 45, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:76)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 47, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:76)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 154, NodeConstantRawBits, "{HWOffsetFix:4, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:799)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:53)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 18, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:799)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:53)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 121, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 41, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:75)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 43, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:96)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:75)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 105, NodeFIFO, "FIFO(nxoffset{3..4096})", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 123, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 27, NodeStreamOffset, "stream offset: 1 - nxoffset{3..4096}", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:65)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 5, NodeInputMappedReg, "Scalar input (mask2)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:35)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 42, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:75)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 44, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:75)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 129, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 39, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:96)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:74)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 26, NodeStreamOffset, "stream offset: -nxoffset{3..4096}", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:65)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 4, NodeInputMappedReg, "Scalar input (mask1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:34)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 38, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:74)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 40, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:74)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 34, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:73)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 36, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:96)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:73)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 25, NodeStreamOffset, "stream offset: -1 - nxoffset{3..4096}", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:65)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 3, NodeInputMappedReg, "Scalar input (mask0)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:33)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 35, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:73)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 37, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:73)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 63, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:96)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:86)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 64, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 126, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 65, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 66, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 127, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 128, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 67, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 68, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 130, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 151, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 69, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 70, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 132, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 133, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 71, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 72, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 134, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 135, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 73, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 74, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 136, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 137, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 75, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 76, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 138, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 139, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 77, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 78, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 140, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 141, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 79, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 80, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 143, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 149, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 81, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:88)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 86, NodeOutput, "Output(outStream)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ntwodaveragevariable.TwoDAverageVariableKernel.<init>(TwoDAverageVariableKernel.maxj:95)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:23)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 91, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 153, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 88, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 89, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 90, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 92, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 152, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 94, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 95, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 97, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 98, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
PHOTON_NODE_DATA(TwoDAverageVariableKernel, 96, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ntwodaveragevariable.TwoDAverageVariableManager.main(TwoDAverageVariableManager.maxj:28)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int TwoDAverageVariable_has_errors(void)
{	return stored_has_error; }
const char* TwoDAverageVariable_get_errors(void)
{	return stored_error; }
void TwoDAverageVariable_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char TwoDAverageVariable_use_simulation[16];
static void TwoDAverageVariable_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(TwoDAverageVariable_use_simulation, 16, "TwoDAver_%05ld_", pid);
}
static const char *TwoDAverageVariable_check_use_simulation(void)
{
	TwoDAverageVariable_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = TwoDAverageVariable_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int TwoDAverageVariable_simulation_launch = 0;
int TwoDAverageVariable_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = TwoDAverageVariable_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int TwoDAverageVariable_simulator_stop(void)
{
	const char *use_sim = TwoDAverageVariable_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void TwoDAverageVariable_static_init(void) 
{
	stored_maxfile = TwoDAverageVariable_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = TwoDAverageVariable_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = TwoDAverageVariable_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			TwoDAverageVariable_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void TwoDAverageVariable_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (TwoDAverageVariable_simulation_launch == 1) {
		int sim_stat = TwoDAverageVariable_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		TwoDAverageVariable_simulation_launch = 0;
	}
}

static int TwoDAverageVariable_get_pcie_alignment(void)
{
#ifdef TwoDAverageVariable_PCIE_ALIGNMENT
	return ((TwoDAverageVariable_PCIE_ALIGNMENT < 1) ? 16 : TwoDAverageVariable_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int TwoDAverageVariable_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = TwoDAverageVariable_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *TwoDAverageVariable_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = TwoDAverageVariable_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct TwoDAverageVariable_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} TwoDAverageVariable_callback_stream_t;

typedef struct TwoDAverageVariable_callback_data {
	TwoDAverageVariable_callback_stream_t stream[2]; 
	int count;
	int max_count;
} TwoDAverageVariable_callback_data_t;

static void TwoDAverageVariable_callback_internal(void *cb_data)
{
	TwoDAverageVariable_callback_data_t *data = (TwoDAverageVariable_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		TwoDAverageVariable_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* TwoDAverageVariable_convert_internal(
	max_file_t *maxfile,
	TwoDAverageVariable_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	TwoDAverageVariable_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(TwoDAverageVariable_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function TwoDAverageVariable_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &TwoDAverageVariable_callback_internal;
	}

	/* code for offset TwoDAverageVariableKernel_nxoffset*/
	long offset_TwoDAverageVariableKernel_nxoffset = interface_actions->offset_TwoDAverageVariableKernel_nxoffset;
	max_set_offset(actions, "TwoDAverageVariableKernel", "nxoffset", offset_TwoDAverageVariableKernel_nxoffset);
	CHECK_ERRORS;
	/* end of code for offset offset_TwoDAverageVariableKernel_nxoffset*/
	
	int32_t param_N = interface_actions->param_N;
	
	/* code for scalar TwoDAverageVariableKernel.run_cycle_count */
	uint64_t ticks_TwoDAverageVariableKernel = param_N;
	max_set_ticks(actions, "TwoDAverageVariableKernel", param_N);
	CHECK_ERRORS;
	/* end of code for scalar TwoDAverageVariableKernel.run_cycle_count*/
	
	/* code for scalar TwoDAverageVariableKernel.mask0 */
	uint64_t inscalar_TwoDAverageVariableKernel_mask0 = interface_actions->inscalar_TwoDAverageVariableKernel_mask0;
	max_set_uint64t(actions, "TwoDAverageVariableKernel", "mask0", inscalar_TwoDAverageVariableKernel_mask0);
	CHECK_ERRORS;
	/* end of code for scalar TwoDAverageVariableKernel.mask0*/
	
	/* code for scalar TwoDAverageVariableKernel.mask1 */
	uint64_t inscalar_TwoDAverageVariableKernel_mask1 = interface_actions->inscalar_TwoDAverageVariableKernel_mask1;
	max_set_uint64t(actions, "TwoDAverageVariableKernel", "mask1", inscalar_TwoDAverageVariableKernel_mask1);
	CHECK_ERRORS;
	/* end of code for scalar TwoDAverageVariableKernel.mask1*/
	
	/* code for scalar TwoDAverageVariableKernel.mask2 */
	uint64_t inscalar_TwoDAverageVariableKernel_mask2 = interface_actions->inscalar_TwoDAverageVariableKernel_mask2;
	max_set_uint64t(actions, "TwoDAverageVariableKernel", "mask2", inscalar_TwoDAverageVariableKernel_mask2);
	CHECK_ERRORS;
	/* end of code for scalar TwoDAverageVariableKernel.mask2*/
	
	/* code for scalar TwoDAverageVariableKernel.mask3 */
	uint64_t inscalar_TwoDAverageVariableKernel_mask3 = interface_actions->inscalar_TwoDAverageVariableKernel_mask3;
	max_set_uint64t(actions, "TwoDAverageVariableKernel", "mask3", inscalar_TwoDAverageVariableKernel_mask3);
	CHECK_ERRORS;
	/* end of code for scalar TwoDAverageVariableKernel.mask3*/
	
	/* code for scalar TwoDAverageVariableKernel.mask4 */
	uint64_t inscalar_TwoDAverageVariableKernel_mask4 = interface_actions->inscalar_TwoDAverageVariableKernel_mask4;
	max_set_uint64t(actions, "TwoDAverageVariableKernel", "mask4", inscalar_TwoDAverageVariableKernel_mask4);
	CHECK_ERRORS;
	/* end of code for scalar TwoDAverageVariableKernel.mask4*/
	
	/* code for scalar TwoDAverageVariableKernel.mask5 */
	uint64_t inscalar_TwoDAverageVariableKernel_mask5 = interface_actions->inscalar_TwoDAverageVariableKernel_mask5;
	max_set_uint64t(actions, "TwoDAverageVariableKernel", "mask5", inscalar_TwoDAverageVariableKernel_mask5);
	CHECK_ERRORS;
	/* end of code for scalar TwoDAverageVariableKernel.mask5*/
	
	/* code for scalar TwoDAverageVariableKernel.mask6 */
	uint64_t inscalar_TwoDAverageVariableKernel_mask6 = interface_actions->inscalar_TwoDAverageVariableKernel_mask6;
	max_set_uint64t(actions, "TwoDAverageVariableKernel", "mask6", inscalar_TwoDAverageVariableKernel_mask6);
	CHECK_ERRORS;
	/* end of code for scalar TwoDAverageVariableKernel.mask6*/
	
	/* code for scalar TwoDAverageVariableKernel.mask7 */
	uint64_t inscalar_TwoDAverageVariableKernel_mask7 = interface_actions->inscalar_TwoDAverageVariableKernel_mask7;
	max_set_uint64t(actions, "TwoDAverageVariableKernel", "mask7", inscalar_TwoDAverageVariableKernel_mask7);
	CHECK_ERRORS;
	/* end of code for scalar TwoDAverageVariableKernel.mask7*/
	
	/* code for scalar TwoDAverageVariableKernel.mask8 */
	uint64_t inscalar_TwoDAverageVariableKernel_mask8 = interface_actions->inscalar_TwoDAverageVariableKernel_mask8;
	max_set_uint64t(actions, "TwoDAverageVariableKernel", "mask8", inscalar_TwoDAverageVariableKernel_mask8);
	CHECK_ERRORS;
	/* end of code for scalar TwoDAverageVariableKernel.mask8*/
	
	int64_t tmp_0 = (param_N * 4);
	
	/* code for stream inStream */
	size_t instream_size_inStream = tmp_0;
	if (instream_size_inStream > 0) {
		const uint32_t *stream_ptr = interface_actions->instream_inStream;
		if (use_callback && (1 == TwoDAverageVariable_check_aligned(interface_actions->instream_inStream))) {
			uint32_t *aligned_instream_inStream = malloc(instream_size_inStream);
			if (aligned_instream_inStream == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'inStream'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_inStream;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_inStream;
			(&cb_data->stream[cb_data->count])->size        = instream_size_inStream;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_inStream, interface_actions->instream_inStream, instream_size_inStream);
			stream_ptr = aligned_instream_inStream;
		}
		max_queue_input(actions, "inStream", stream_ptr, instream_size_inStream);
		CHECK_ERRORS;
	}
	/* end of code for stream inStream */
	
	int64_t tmp_1 = (param_N * 4);
	
	/* code for stream outStream */
	size_t outstream_size_outStream = tmp_1;
	if (outstream_size_outStream > 0) {
		uint32_t *stream_ptr = interface_actions->outstream_outStream;
		if (use_callback && (1 == TwoDAverageVariable_check_aligned(interface_actions->outstream_outStream))) {
			uint32_t *aligned_outstream_outStream = malloc(outstream_size_outStream);
			if (aligned_outstream_outStream == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'outStream'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_outStream;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_outStream;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_outStream;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_outStream;
		}
		max_queue_output(actions, "outStream", stream_ptr, outstream_size_outStream);
		CHECK_ERRORS;
	}
	/* end of code for stream outStream */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void TwoDAverageVariable(
	int32_t param_N,
	long offset_TwoDAverageVariableKernel_nxoffset,
	uint64_t inscalar_TwoDAverageVariableKernel_mask0,
	uint64_t inscalar_TwoDAverageVariableKernel_mask1,
	uint64_t inscalar_TwoDAverageVariableKernel_mask2,
	uint64_t inscalar_TwoDAverageVariableKernel_mask3,
	uint64_t inscalar_TwoDAverageVariableKernel_mask4,
	uint64_t inscalar_TwoDAverageVariableKernel_mask5,
	uint64_t inscalar_TwoDAverageVariableKernel_mask6,
	uint64_t inscalar_TwoDAverageVariableKernel_mask7,
	uint64_t inscalar_TwoDAverageVariableKernel_mask8,
	const uint32_t *instream_inStream,
	uint32_t *outstream_outStream)
{
	(void) pthread_once(&slic_bs_is_initialised, TwoDAverageVariable_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = TwoDAverageVariable_nonblock(param_N, offset_TwoDAverageVariableKernel_nxoffset, inscalar_TwoDAverageVariableKernel_mask0, inscalar_TwoDAverageVariableKernel_mask1, inscalar_TwoDAverageVariableKernel_mask2, inscalar_TwoDAverageVariableKernel_mask3, inscalar_TwoDAverageVariableKernel_mask4, inscalar_TwoDAverageVariableKernel_mask5, inscalar_TwoDAverageVariableKernel_mask6, inscalar_TwoDAverageVariableKernel_mask7, inscalar_TwoDAverageVariableKernel_mask8, instream_inStream, outstream_outStream);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *TwoDAverageVariable_nonblock(
	int32_t param_N,
	long offset_TwoDAverageVariableKernel_nxoffset,
	uint64_t inscalar_TwoDAverageVariableKernel_mask0,
	uint64_t inscalar_TwoDAverageVariableKernel_mask1,
	uint64_t inscalar_TwoDAverageVariableKernel_mask2,
	uint64_t inscalar_TwoDAverageVariableKernel_mask3,
	uint64_t inscalar_TwoDAverageVariableKernel_mask4,
	uint64_t inscalar_TwoDAverageVariableKernel_mask5,
	uint64_t inscalar_TwoDAverageVariableKernel_mask6,
	uint64_t inscalar_TwoDAverageVariableKernel_mask7,
	uint64_t inscalar_TwoDAverageVariableKernel_mask8,
	const uint32_t *instream_inStream,
	uint32_t *outstream_outStream)
{
	TwoDAverageVariable_actions_t interface_actions;
	interface_actions.param_N = param_N;
	interface_actions.offset_TwoDAverageVariableKernel_nxoffset = offset_TwoDAverageVariableKernel_nxoffset;
	interface_actions.inscalar_TwoDAverageVariableKernel_mask0 = inscalar_TwoDAverageVariableKernel_mask0;
	interface_actions.inscalar_TwoDAverageVariableKernel_mask1 = inscalar_TwoDAverageVariableKernel_mask1;
	interface_actions.inscalar_TwoDAverageVariableKernel_mask2 = inscalar_TwoDAverageVariableKernel_mask2;
	interface_actions.inscalar_TwoDAverageVariableKernel_mask3 = inscalar_TwoDAverageVariableKernel_mask3;
	interface_actions.inscalar_TwoDAverageVariableKernel_mask4 = inscalar_TwoDAverageVariableKernel_mask4;
	interface_actions.inscalar_TwoDAverageVariableKernel_mask5 = inscalar_TwoDAverageVariableKernel_mask5;
	interface_actions.inscalar_TwoDAverageVariableKernel_mask6 = inscalar_TwoDAverageVariableKernel_mask6;
	interface_actions.inscalar_TwoDAverageVariableKernel_mask7 = inscalar_TwoDAverageVariableKernel_mask7;
	interface_actions.inscalar_TwoDAverageVariableKernel_mask8 = inscalar_TwoDAverageVariableKernel_mask8;
	interface_actions.instream_inStream = instream_inStream;
	interface_actions.outstream_outStream = outstream_outStream;
	(void) pthread_once(&slic_bs_is_initialised, TwoDAverageVariable_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = TwoDAverageVariable_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void TwoDAverageVariable_run(
	max_engine_t *engine,
	TwoDAverageVariable_actions_t *interface_actions)
{
	max_run_t *run = TwoDAverageVariable_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *TwoDAverageVariable_run_nonblock(
	max_engine_t *engine,
	TwoDAverageVariable_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = TwoDAverageVariable_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void TwoDAverageVariable_run_group(max_group_t *group, TwoDAverageVariable_actions_t *interface_actions)
{
	max_run_t *run = TwoDAverageVariable_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *TwoDAverageVariable_run_group_nonblock(max_group_t *group, TwoDAverageVariable_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = TwoDAverageVariable_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void TwoDAverageVariable_run_array(max_engarray_t *engarray, TwoDAverageVariable_actions_t *interface_actions[])
{
	max_run_t *run = TwoDAverageVariable_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *TwoDAverageVariable_run_array_nonblock(max_engarray_t *engarray, TwoDAverageVariable_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = TwoDAverageVariable_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* TwoDAverageVariable_convert(max_file_t *maxfile, TwoDAverageVariable_actions_t *interface_actions)
{
	return TwoDAverageVariable_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, N, param_N)	
SLIC_SET_TICKS(TwoDAverageVariableKernel, param_N)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_N * 4);)	
SLIC_STREAM(inStream, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_N * 4);)	
SLIC_STREAM(outStream, tmp_1)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IlR3b0RBdmVyYWdlVmFyaWFi
bGUuaCIgbmFtZT0iVHdvREF2ZXJhZ2VWYXJpYWJsZSI+PGNvbnN0YW50IG5hbWU9IlBDSUVfQUxJ
R05NRU5UIiB0eXBlPSJsb25nIiB2YWx1ZT0iMTYiLz48Y29uc3RhbnQgbmFtZT0ibnhNYXgiIHR5
cGU9ImxvbmciIHZhbHVlPSI0MDk2Ii8+PGVuZ2luZW1vZGUgbmFtZT0iZGVmYXVsdCI+PGZ1bmN0
aW9uIG5hbWU9IlR3b0RBdmVyYWdlVmFyaWFibGUiIHJldHVybi12YWx1ZT0idm9pZCI+PHNjYWxh
ciBkZXNjPSJJbnRlcmZhY2UgUGFyYW1ldGVyICZxdW90O04mcXVvdDsuOiBOdW1iZXIgb2YgZGF0
YSBpdGVtcyB0byBwcm9jZXNzIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9OIiB0eXBl
PSJpbnQzMl90Ii8+PHNjYWxhciBkZXNjPSJPZmZzZXQgcGFyYW1ldGVyICZxdW90O254b2Zmc2V0
JnF1b3Q7IGZvciBrZXJuZWwgJnF1b3Q7VHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbCZxdW90Oy4i
IGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Im9mZnNldF9Ud29EQXZlcmFnZVZhcmlhYmxlS2VybmVs
X254b2Zmc2V0IiB0eXBlPSJ1aW50NjRfdCIvPjxzY2FsYXIgZGVzYz0iSW5wdXQgc2NhbGFyIHBh
cmFtZXRlciAmcXVvdDtUd29EQXZlcmFnZVZhcmlhYmxlS2VybmVsLm1hc2swJnF1b3Q7LiIgZGly
ZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9t
YXNrMCIgdHlwZT0idWludDY0X3QiLz48c2NhbGFyIGRlc2M9IklucHV0IHNjYWxhciBwYXJhbWV0
ZXIgJnF1b3Q7VHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbC5tYXNrMSZxdW90Oy4iIGRpcmVjdGlv
bj0iSW5wdXQiIG5hbWU9Imluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazEi
IHR5cGU9InVpbnQ2NF90Ii8+PHNjYWxhciBkZXNjPSJJbnB1dCBzY2FsYXIgcGFyYW1ldGVyICZx
dW90O1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWwubWFzazImcXVvdDsuIiBkaXJlY3Rpb249Iklu
cHV0IiBuYW1lPSJpbnNjYWxhcl9Ud29EQXZlcmFnZVZhcmlhYmxlS2VybmVsX21hc2syIiB0eXBl
PSJ1aW50NjRfdCIvPjxzY2FsYXIgZGVzYz0iSW5wdXQgc2NhbGFyIHBhcmFtZXRlciAmcXVvdDtU
d29EQXZlcmFnZVZhcmlhYmxlS2VybmVsLm1hc2szJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIg
bmFtZT0iaW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9tYXNrMyIgdHlwZT0idWlu
dDY0X3QiLz48c2NhbGFyIGRlc2M9IklucHV0IHNjYWxhciBwYXJhbWV0ZXIgJnF1b3Q7VHdvREF2
ZXJhZ2VWYXJpYWJsZUtlcm5lbC5tYXNrNCZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9
Imluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazQiIHR5cGU9InVpbnQ2NF90
Ii8+PHNjYWxhciBkZXNjPSJJbnB1dCBzY2FsYXIgcGFyYW1ldGVyICZxdW90O1R3b0RBdmVyYWdl
VmFyaWFibGVLZXJuZWwubWFzazUmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnNj
YWxhcl9Ud29EQXZlcmFnZVZhcmlhYmxlS2VybmVsX21hc2s1IiB0eXBlPSJ1aW50NjRfdCIvPjxz
Y2FsYXIgZGVzYz0iSW5wdXQgc2NhbGFyIHBhcmFtZXRlciAmcXVvdDtUd29EQXZlcmFnZVZhcmlh
YmxlS2VybmVsLm1hc2s2JnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zY2FsYXJf
VHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9tYXNrNiIgdHlwZT0idWludDY0X3QiLz48c2NhbGFy
IGRlc2M9IklucHV0IHNjYWxhciBwYXJhbWV0ZXIgJnF1b3Q7VHdvREF2ZXJhZ2VWYXJpYWJsZUtl
cm5lbC5tYXNrNyZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc2NhbGFyX1R3b0RB
dmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazciIHR5cGU9InVpbnQ2NF90Ii8+PHNjYWxhciBkZXNj
PSJJbnB1dCBzY2FsYXIgcGFyYW1ldGVyICZxdW90O1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWwu
bWFzazgmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnNjYWxhcl9Ud29EQXZlcmFn
ZVZhcmlhYmxlS2VybmVsX21hc2s4IiB0eXBlPSJ1aW50NjRfdCIvPjxhcnJheSBkZXNjPSJUaGUg
c3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJhbV9OICogNCkgYnl0ZXMuIiBkaXJlY3Rpb249
IklucHV0IiBuYW1lPSJpbnN0cmVhbV9pblN0cmVhbSIgc2l6ZT0iKHBhcmFtX04gKiA0KSIgdHJh
bnNwb3NlPSJ0cnVlIiB0eXBlPSJ1aW50MzJfdCI+PGRpbWVuc2lvbiBpbmRleD0iMCI+PGxlbmd0
aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iLyIgdmFsdWU9Iigo
cGFyYW1fTiAqIDQpIC8gNCkiPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJh
dG9yPSIqIiB2YWx1ZT0iKHBhcmFtX04gKiA0KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fTiIv
Pjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9u
Q2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5j
dGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48YXJyYXkgZGVzYz0iVGhlIHN0
cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fTiAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJP
dXRwdXQiIG5hbWU9Im91dHN0cmVhbV9vdXRTdHJlYW0iIHNpemU9IihwYXJhbV9OICogNCkiIHRy
YW5zcG9zZT0idHJ1ZSIgdHlwZT0idWludDMyX3QiPjxkaW1lbnNpb24gaW5kZXg9IjAiPjxsZW5n
dGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIo
KHBhcmFtX04gKiA0KSAvIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVy
YXRvcj0iKiIgdmFsdWU9IihwYXJhbV9OICogNCkiPjx1c2VyUGFyYW0gdmFsdWU9InBhcmFtX04i
Lz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlv
bkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVu
Y3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PC9mdW5jdGlvbj48L2VuZ2lu
ZW1vZGU+PC9tYXhmaWxlPg==
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBUd29EQXZlcmFnZVZhcmlhYmxlX2hhc19lcnJvcnModm9pZCkKewlyZXR1cm4gc3Rv
cmVkX2hhc19lcnJvcjsgfQpjb25zdCBjaGFyKiBUd29EQXZlcmFnZVZhcmlhYmxlX2dldF9lcnJv
cnModm9pZCkKewlyZXR1cm4gc3RvcmVkX2Vycm9yOyB9CnZvaWQgVHdvREF2ZXJhZ2VWYXJpYWJs
ZV9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9y
ID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBUd29EQXZlcmFn
ZVZhcmlhYmxlX3VzZV9zaW11bGF0aW9uWzE2XTsKc3RhdGljIHZvaWQgVHdvREF2ZXJhZ2VWYXJp
YWJsZV9kZWZfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJbG9uZyBwaWQgPSAoKGxvbmcpIGdldHBp
ZCgpKSAlIDEwMDAwMDsKCXNucHJpbnRmKFR3b0RBdmVyYWdlVmFyaWFibGVfdXNlX3NpbXVsYXRp
b24sIDE2LCAiVHdvREF2ZXJfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3QgY2hhciAqVHdv
REF2ZXJhZ2VWYXJpYWJsZV9jaGVja191c2Vfc2ltdWxhdGlvbih2b2lkKQp7CglUd29EQXZlcmFn
ZVZhcmlhYmxlX2RlZl91c2Vfc2ltdWxhdGlvbigpOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IG1h
eF9jb25maWdfZ2V0X3N0cmluZyhNQVhfQ09ORklHX1VTRV9TSU1VTEFUSU9OKTsKCWlmICh1c2Vf
c2ltID09IE5VTEwpIHsKCQl1c2Vfc2ltID0gVHdvREF2ZXJhZ2VWYXJpYWJsZV91c2Vfc2ltdWxh
dGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElPTiwg
dXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGludCBUd29EQXZlcmFnZVZh
cmlhYmxlX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKaW50IFR3b0RBdmVyYWdlVmFyaWFibGVfc2lt
dWxhdG9yX3N0YXJ0KHZvaWQpCnsKCWludCByZXR2YWwgPSAwOwoJY29uc3QgY2hhciAqdXNlX3Np
bSA9IFR3b0RBdmVyYWdlVmFyaWFibGVfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVm
ZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNv
bXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYNDg0OEEgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVz
ZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9
PSBOVUxMKSB7CgkJc3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQg
LSBzdHJsZW4oYnVmZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hp
bGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQg
dGhpcyB0byBnZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRl
cnIsIGJ1ZmYpOyAqLwoJCWlmIChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9y
KGJ1ZmYpOwoJCQlyZXR2YWwgPSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4g
cmV0dmFsOwp9CgppbnQgVHdvREF2ZXJhZ2VWYXJpYWJsZV9zaW11bGF0b3Jfc3RvcCh2b2lkKQp7
Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gVHdvREF2ZXJhZ2VWYXJpYWJsZV9jaGVja191c2Vfc2lt
dWxhdGlvbigpOwoJY2hhciBidWZmWzEwMjRdOwoJc25wcmludGYoYnVmZiwgMTAyNCwgIlBBVEg9
c2ltdXRpbHM6JFBBVEggbWF4Y29tcGlsZXJzaW0gLWQgMSAtbiAlcyAtYyBNQVg0ODQ4QSAtUyBz
aW11dGlscyBzdG9wIiwgdXNlX3NpbSk7CglGSUxFICpwaXBlX2ZwID0gcG9wZW4oYnVmZiwgInIi
KTsKCWlmIChwaXBlX2ZwID09IE5VTEwpIHsKCQlzdHJuY2F0KGJ1ZmYsICIgOiBmYWlsZWQgdG8g
ZXhlY3V0ZS4iLCAoMTAyNCAtIHN0cmxlbihidWZmKSkpOwoJCXNldF9lcnJvcihidWZmKTsKCQly
ZXR1cm4gLTE7Cgl9Cgl3aGlsZSAoZmdldHMoYnVmZiwgMTAyNCwgcGlwZV9mcCkgIT0gTlVMTCkg
ewoJCS8qIFVuY29tbWVudCB0aGlzIHRvIGdldCBzaW11bGF0b3IgY29tbWFuZCBvdXRwdXQgKi8K
CQkvKiBmcHJpbnRmKHN0ZGVyciwgYnVmZik7ICovCgkJOwoJfQoJcGNsb3NlKHBpcGVfZnApOwoJ
cmV0dXJuIDA7Cn0KCnN0YXRpYyB2b2lkIFR3b0RBdmVyYWdlVmFyaWFibGVfc3RhdGljX2luaXQo
dm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0gVHdvREF2ZXJhZ2VWYXJpYWJsZV9pbml0KCk7Cglp
ZiAoc3RvcmVkX21heGZpbGUgPT0gTlVMTCB8fCAhbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJv
cnMpKSB7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2wo
TUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQll
bHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gbG9hZCBtYXhmaWxlIik7IHJldHVybjsgfQoJfQoJ
aWYoIW1heF9vayhtYXhfZ2xvYmFsX2Vycm9ycygpKSkgewoJCXNldF9lcnJvcl9hbmRfZnJlZSht
YXhfZXJyb3JzX3RyYWNlKG1heF9nbG9iYWxfZXJyb3JzKCkpKTsKCQlyZXR1cm47Cgl9CglpZigh
bWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05f
RVJST1IpKQoJCW1heF9lcnJvcnNfbW9kZShzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzLCAwKTsKCXRp
bWVfdCB0aW1lb3V0X3ByZXZpb3VzID0gbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4ZmlsZSwg
MzApOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IFR3b0RBdmVyYWdlVmFyaWFibGVfY2hlY2tfdXNl
X3NpbXVsYXRpb24oKTsKCWlmIChtYXhfcGluZ19kYWVtb24oc3RvcmVkX21heGZpbGUsIHVzZV9z
aW0pID09IDApIHsKCQlpbnQgc2ltX3N0YXQgPSBUd29EQXZlcmFnZVZhcmlhYmxlX3NpbXVsYXRv
cl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9y
ZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkpIHsKCQkJVHdvREF2ZXJhZ2VWYXJpYWJsZV9zaW11
bGF0aW9uX2xhdW5jaCA9IDE7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQW4gZXJy
b3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIHN0YXJ0IHRoZSBzaW11bGF0aW9uIGluZnJhc3Ry
dWN0dXJlIGF1dG9tYXRpY2FsbHkuIik7CgkJCXNldF9lcnJvcigiRXJyb3I6IENoZWNrIHRoYXQg
J3VzZV9zaW11bGF0aW9uPTxzaW11bGF0b3JfbmFtZT4nIGlzIHNldCBjb3JyZWN0bHkgaW4geW91
ciBTTGlDIGNvbmZpZ3VyYXRpb24iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogYW5kIHRoYXQgdGhl
IGFzc29jaWF0ZWQgc2ltdWxhdGVkIHN5c3RlbSBkYWVtb24gaXMgcnVubmluZy4iKTsKCQkJbWF4
X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJ
cmV0dXJuOwoJCX0KCX0KCXN0b3JlZF9lbmdpbmUgPSBtYXhfbG9hZChzdG9yZWRfbWF4ZmlsZSwg
IioiKTsKCWlmICghbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJaWYobWF4X2Nv
bmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1Ip
KSB7CgkJCWZwcmludGYoc3RkZXJyLCAiXG5VbmFibGUgdG8gbG9hZCBlbmdpbmU6IGFib3J0aW5n
IG5vdy5cblxuIik7CgkJCWZmbHVzaChzdGRlcnIpOwoJCQlhYm9ydCgpOwoJCX0gZWxzZSB7CgkJ
CXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKHN0b3JlZF9tYXhmaWxlLT5lcnJv
cnMpKTsKCQkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxl
ID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0gCgl9IAoJbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4
ZmlsZSwgdGltZW91dF9wcmV2aW91cyk7Cn0Kdm9pZCBUd29EQXZlcmFnZVZhcmlhYmxlX2ZyZWUo
dm9pZCkKewoJaWYgKHN0b3JlZF9lbmdpbmUgIT0gTlVMTCkgewoJCW1heF91bmxvYWQoc3RvcmVk
X2VuZ2luZSk7CgkJc3RvcmVkX2VuZ2luZSA9IE5VTEw7Cgl9CglpZiAoc3RvcmVkX21heGZpbGUg
IT0gTlVMTCkgewoJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCXN0b3JlZF9tYXhm
aWxlID0gTlVMTDsKCX0KCWlmIChzdG9yZWRfZXJyb3IgIT0gTlVMTCkgewoJCWZyZWUoc3RvcmVk
X2Vycm9yKTsKCQlzdG9yZWRfZXJyb3IgPSBOVUxMOwoJfQoJaWYgKFR3b0RBdmVyYWdlVmFyaWFi
bGVfc2ltdWxhdGlvbl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IFR3b0RBdmVyYWdl
VmFyaWFibGVfc2ltdWxhdG9yX3N0b3AoKTsKCQlpZiAoc2ltX3N0YXQgIT0gMCApIHsKCQkJZnBy
aW50ZihzdGRlcnIsICJFcnJvciBzdG9wcGluZyBzaW11bGF0b3IuIik7CgkJfQoJCVR3b0RBdmVy
YWdlVmFyaWFibGVfc2ltdWxhdGlvbl9sYXVuY2ggPSAwOwoJfQp9CgpzdGF0aWMgaW50IFR3b0RB
dmVyYWdlVmFyaWFibGVfZ2V0X3BjaWVfYWxpZ25tZW50KHZvaWQpCnsKI2lmZGVmIFR3b0RBdmVy
YWdlVmFyaWFibGVfUENJRV9BTElHTk1FTlQKCXJldHVybiAoKFR3b0RBdmVyYWdlVmFyaWFibGVf
UENJRV9BTElHTk1FTlQgPCAxKSA/IDE2IDogVHdvREF2ZXJhZ2VWYXJpYWJsZV9QQ0lFX0FMSUdO
TUVOVCk7CiNlbHNlCglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IFR3b0RBdmVyYWdl
VmFyaWFibGVfY2hlY2tfYWxpZ25lZChjb25zdCB2b2lkICpkYXRhKQp7Cgl1aW50cHRyX3QgcG9p
bnRlciA9ICh1aW50cHRyX3QpIGRhdGE7CglpbnQgYWxpZ25tZW50ID0gVHdvREF2ZXJhZ2VWYXJp
YWJsZV9nZXRfcGNpZV9hbGlnbm1lbnQoKTsKCXJldHVybiAocG9pbnRlciAlIGFsaWdubWVudCkg
PyAxIDogMDsKfQoKc3RhdGljIHZvaWQgKlR3b0RBdmVyYWdlVmFyaWFibGVfbWFsbG9jX2FsaWdu
ZWQoY29uc3Qgc2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQgPSBUd29E
QXZlcmFnZVZhcmlhYmxlX2dldF9wY2llX2FsaWdubWVudCgpOwoJcG9zaXhfbWVtYWxpZ24oJnB0
ciwgYWxpZ25tZW50LCBzaXplKTsKCXJldHVybiBwdHI7Cn0KCgoKLyotLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFjZSBkZWZhdWx0IC0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgoK
I2RlZmluZSBDSEVDS19FUlJPUlNfU1QoU1QsIFJFVCkgaWYoIW1heF9vayhTVC0+ZXJyb3JzKSkg
eyBpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9S
VF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuIiwgbWF4X2Vycm9yc190cmFjZShT
VC0+ZXJyb3JzKSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJh
Y2UoU1QtPmVycm9ycykpOyByZXR1cm4gUkVUOyB9IAojZGVmaW5lIENIRUNLX05VTEwoVkFMVUUs
IE1FU1NBR0UsIFJFVCkgaWYoVkFMVUUgPT0gTlVMTCkgeyBpZiAobWF4X2NvbmZpZ19nZXRfYm9v
bChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7IGZwcmludGYo
c3RkZXJyLCAiJXNcbiVzXG4iLCAoc3RvcmVkX2Vycm9yID09IE5VTEwpID8gIiIgOiBzdG9yZWRf
ZXJyb3IsIE1FU1NBR0UpOyBhYm9ydCgpOyB9IHNldF9lcnJvcihNRVNTQUdFKTsgcmV0dXJuIFJF
VDsgfQoKIAp0eXBlZGVmIHN0cnVjdCBUd29EQXZlcmFnZVZhcmlhYmxlX2NhbGxiYWNrX3N0cmVh
bSB7Cgl1aW50OF90ICp1c2VyX3B0cjsKCXVpbnQ4X3QgKmFsaWduZWRfcHRyOwoJc2l6ZV90ICAg
c2l6ZTsKCWludCAgICAgIGlzX291dHB1dDsKfSBUd29EQXZlcmFnZVZhcmlhYmxlX2NhbGxiYWNr
X3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgVHdvREF2ZXJhZ2VWYXJpYWJsZV9jYWxsYmFja19k
YXRhIHsKCVR3b0RBdmVyYWdlVmFyaWFibGVfY2FsbGJhY2tfc3RyZWFtX3Qgc3RyZWFtWzJdOyAK
CWludCBjb3VudDsKCWludCBtYXhfY291bnQ7Cn0gVHdvREF2ZXJhZ2VWYXJpYWJsZV9jYWxsYmFj
a19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBUd29EQXZlcmFnZVZhcmlhYmxlX2NhbGxiYWNrX2ludGVy
bmFsKHZvaWQgKmNiX2RhdGEpCnsKCVR3b0RBdmVyYWdlVmFyaWFibGVfY2FsbGJhY2tfZGF0YV90
ICpkYXRhID0gKFR3b0RBdmVyYWdlVmFyaWFibGVfY2FsbGJhY2tfZGF0YV90KikgY2JfZGF0YTsK
CWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJCVR3b0RBdmVyYWdl
VmFyaWFibGVfY2FsbGJhY2tfc3RyZWFtX3QgKnMgPSAmZGF0YS0+c3RyZWFtW2ldOwoJCWlmIChz
LT5pc19vdXRwdXQgJiYgKHMtPnNpemUgPiAwKSkgewoJCQltZW1jcHkocy0+dXNlcl9wdHIsIHMt
PmFsaWduZWRfcHRyLCBzLT5zaXplKTsKCQl9CgkJZnJlZShzLT5hbGlnbmVkX3B0cik7Cgl9Cglm
cmVlKGRhdGEpOwp9CgpzdGF0aWMgbWF4X2FjdGlvbnNfdCogVHdvREF2ZXJhZ2VWYXJpYWJsZV9j
b252ZXJ0X2ludGVybmFsKAoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSwKCVR3b0RBdmVyYWdlVmFyaWFi
bGVfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwK
CXZvaWQgKCoqY2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsK
CW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwp
OwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JT
IGlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vy
cm9yc190cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJVHdvREF2ZXJh
Z2VWYXJpYWJsZV9jYWxsYmFja19kYXRhX3QgKmNiX2RhdGEgPSBOVUxMOwoJaW50IHVzZV9jYWxs
YmFjayA9IChjYWxsYmFja19mdW5jICE9IE5VTEwpICYmIChjYWxsYmFja19kYXRhICE9IE5VTEwp
OwoJaWYgKHVzZV9jYWxsYmFjaykgewoJCWNiX2RhdGEgPSBtYWxsb2Moc2l6ZW9mKFR3b0RBdmVy
YWdlVmFyaWFibGVfY2FsbGJhY2tfZGF0YV90KSk7CgkJaWYgKGNiX2RhdGEgPT0gTlVMTCkgewoJ
CQlmcHJpbnRmKHN0ZGVyciwgIlVuYWJsZSB0byBhbGxvY2F0ZSBtZW1vcnkgZm9yIHN0cmVhbSBj
YWxsYmFjayBkYXRhIGluIGZ1bmN0aW9uIFR3b0RBdmVyYWdlVmFyaWFibGVfY29udmVydF9pbnRl
cm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0KCQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJ
CWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsK
CQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmVHdvREF2ZXJhZ2VWYXJpYWJsZV9jYWxsYmFja19pbnRl
cm5hbDsKCX0KCgkvKiBjb2RlIGZvciBvZmZzZXQgVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9u
eG9mZnNldCovCglsb25nIG9mZnNldF9Ud29EQXZlcmFnZVZhcmlhYmxlS2VybmVsX254b2Zmc2V0
ID0gaW50ZXJmYWNlX2FjdGlvbnMtPm9mZnNldF9Ud29EQXZlcmFnZVZhcmlhYmxlS2VybmVsX254
b2Zmc2V0OwoJbWF4X3NldF9vZmZzZXQoYWN0aW9ucywgIlR3b0RBdmVyYWdlVmFyaWFibGVLZXJu
ZWwiLCAibnhvZmZzZXQiLCBvZmZzZXRfVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9ueG9mZnNl
dCk7CglDSEVDS19FUlJPUlM7CgkvKiBlbmQgb2YgY29kZSBmb3Igb2Zmc2V0IG9mZnNldF9Ud29E
QXZlcmFnZVZhcmlhYmxlS2VybmVsX254b2Zmc2V0Ki8KCQoJaW50MzJfdCBwYXJhbV9OID0gaW50
ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX047CgkKCS8qIGNvZGUgZm9yIHNjYWxhciBUd29EQXZlcmFn
ZVZhcmlhYmxlS2VybmVsLnJ1bl9jeWNsZV9jb3VudCAqLwoJdWludDY0X3QgdGlja3NfVHdvREF2
ZXJhZ2VWYXJpYWJsZUtlcm5lbCA9IHBhcmFtX047CgltYXhfc2V0X3RpY2tzKGFjdGlvbnMsICJU
d29EQXZlcmFnZVZhcmlhYmxlS2VybmVsIiwgcGFyYW1fTik7CglDSEVDS19FUlJPUlM7CgkvKiBl
bmQgb2YgY29kZSBmb3Igc2NhbGFyIFR3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWwucnVuX2N5Y2xl
X2NvdW50Ki8KCQoJLyogY29kZSBmb3Igc2NhbGFyIFR3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWwu
bWFzazAgKi8KCXVpbnQ2NF90IGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFz
azAgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5l
bF9tYXNrMDsKCW1heF9zZXRfdWludDY0dChhY3Rpb25zLCAiVHdvREF2ZXJhZ2VWYXJpYWJsZUtl
cm5lbCIsICJtYXNrMCIsIGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazAp
OwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBUd29EQXZlcmFnZVZh
cmlhYmxlS2VybmVsLm1hc2swKi8KCQoJLyogY29kZSBmb3Igc2NhbGFyIFR3b0RBdmVyYWdlVmFy
aWFibGVLZXJuZWwubWFzazEgKi8KCXVpbnQ2NF90IGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFi
bGVLZXJuZWxfbWFzazEgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zY2FsYXJfVHdvREF2ZXJhZ2VW
YXJpYWJsZUtlcm5lbF9tYXNrMTsKCW1heF9zZXRfdWludDY0dChhY3Rpb25zLCAiVHdvREF2ZXJh
Z2VWYXJpYWJsZUtlcm5lbCIsICJtYXNrMSIsIGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVL
ZXJuZWxfbWFzazEpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBU
d29EQXZlcmFnZVZhcmlhYmxlS2VybmVsLm1hc2sxKi8KCQoJLyogY29kZSBmb3Igc2NhbGFyIFR3
b0RBdmVyYWdlVmFyaWFibGVLZXJuZWwubWFzazIgKi8KCXVpbnQ2NF90IGluc2NhbGFyX1R3b0RB
dmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zY2FsYXJf
VHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9tYXNrMjsKCW1heF9zZXRfdWludDY0dChhY3Rpb25z
LCAiVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbCIsICJtYXNrMiIsIGluc2NhbGFyX1R3b0RBdmVy
YWdlVmFyaWFibGVLZXJuZWxfbWFzazIpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUg
Zm9yIHNjYWxhciBUd29EQXZlcmFnZVZhcmlhYmxlS2VybmVsLm1hc2syKi8KCQoJLyogY29kZSBm
b3Igc2NhbGFyIFR3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWwubWFzazMgKi8KCXVpbnQ2NF90IGlu
c2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazMgPSBpbnRlcmZhY2VfYWN0aW9u
cy0+aW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9tYXNrMzsKCW1heF9zZXRfdWlu
dDY0dChhY3Rpb25zLCAiVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbCIsICJtYXNrMyIsIGluc2Nh
bGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazMpOwoJQ0hFQ0tfRVJST1JTOwoJLyog
ZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBUd29EQXZlcmFnZVZhcmlhYmxlS2VybmVsLm1hc2szKi8K
CQoJLyogY29kZSBmb3Igc2NhbGFyIFR3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWwubWFzazQgKi8K
CXVpbnQ2NF90IGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazQgPSBpbnRl
cmZhY2VfYWN0aW9ucy0+aW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9tYXNrNDsK
CW1heF9zZXRfdWludDY0dChhY3Rpb25zLCAiVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbCIsICJt
YXNrNCIsIGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazQpOwoJQ0hFQ0tf
RVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBUd29EQXZlcmFnZVZhcmlhYmxlS2Vy
bmVsLm1hc2s0Ki8KCQoJLyogY29kZSBmb3Igc2NhbGFyIFR3b0RBdmVyYWdlVmFyaWFibGVLZXJu
ZWwubWFzazUgKi8KCXVpbnQ2NF90IGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxf
bWFzazUgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtl
cm5lbF9tYXNrNTsKCW1heF9zZXRfdWludDY0dChhY3Rpb25zLCAiVHdvREF2ZXJhZ2VWYXJpYWJs
ZUtlcm5lbCIsICJtYXNrNSIsIGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFz
azUpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBUd29EQXZlcmFn
ZVZhcmlhYmxlS2VybmVsLm1hc2s1Ki8KCQoJLyogY29kZSBmb3Igc2NhbGFyIFR3b0RBdmVyYWdl
VmFyaWFibGVLZXJuZWwubWFzazYgKi8KCXVpbnQ2NF90IGluc2NhbGFyX1R3b0RBdmVyYWdlVmFy
aWFibGVLZXJuZWxfbWFzazYgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zY2FsYXJfVHdvREF2ZXJh
Z2VWYXJpYWJsZUtlcm5lbF9tYXNrNjsKCW1heF9zZXRfdWludDY0dChhY3Rpb25zLCAiVHdvREF2
ZXJhZ2VWYXJpYWJsZUtlcm5lbCIsICJtYXNrNiIsIGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFi
bGVLZXJuZWxfbWFzazYpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxh
ciBUd29EQXZlcmFnZVZhcmlhYmxlS2VybmVsLm1hc2s2Ki8KCQoJLyogY29kZSBmb3Igc2NhbGFy
IFR3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWwubWFzazcgKi8KCXVpbnQ2NF90IGluc2NhbGFyX1R3
b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazcgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zY2Fs
YXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9tYXNrNzsKCW1heF9zZXRfdWludDY0dChhY3Rp
b25zLCAiVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbCIsICJtYXNrNyIsIGluc2NhbGFyX1R3b0RB
dmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazcpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNv
ZGUgZm9yIHNjYWxhciBUd29EQXZlcmFnZVZhcmlhYmxlS2VybmVsLm1hc2s3Ki8KCQoJLyogY29k
ZSBmb3Igc2NhbGFyIFR3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWwubWFzazggKi8KCXVpbnQ2NF90
IGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazggPSBpbnRlcmZhY2VfYWN0
aW9ucy0+aW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9tYXNrODsKCW1heF9zZXRf
dWludDY0dChhY3Rpb25zLCAiVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbCIsICJtYXNrOCIsIGlu
c2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazgpOwoJQ0hFQ0tfRVJST1JTOwoJ
LyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBUd29EQXZlcmFnZVZhcmlhYmxlS2VybmVsLm1hc2s4
Ki8KCQoJaW50NjRfdCB0bXBfMCA9IChwYXJhbV9OICogNCk7CgkKCS8qIGNvZGUgZm9yIHN0cmVh
bSBpblN0cmVhbSAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfaW5TdHJlYW0gPSB0bXBfMDsKCWlm
IChpbnN0cmVhbV9zaXplX2luU3RyZWFtID4gMCkgewoJCWNvbnN0IHVpbnQzMl90ICpzdHJlYW1f
cHRyID0gaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2luU3RyZWFtOwoJCWlmICh1c2VfY2Fs
bGJhY2sgJiYgKDEgPT0gVHdvREF2ZXJhZ2VWYXJpYWJsZV9jaGVja19hbGlnbmVkKGludGVyZmFj
ZV9hY3Rpb25zLT5pbnN0cmVhbV9pblN0cmVhbSkpKSB7CgkJCXVpbnQzMl90ICphbGlnbmVkX2lu
c3RyZWFtX2luU3RyZWFtID0gbWFsbG9jKGluc3RyZWFtX3NpemVfaW5TdHJlYW0pOwoJCQlpZiAo
YWxpZ25lZF9pbnN0cmVhbV9pblN0cmVhbSA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9y
X3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0
byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9yeSBmb3Igc3RyZWFtICdpblN0cmVhbSciKTsKCQkJCUNI
RUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51
c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2luU3Ry
ZWFtOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9
ICh1aW50OF90KikgYWxpZ25lZF9pbnN0cmVhbV9pblN0cmVhbTsKCQkJKCZjYl9kYXRhLT5zdHJl
YW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBpbnN0cmVhbV9zaXplX2luU3RyZWFt
OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDA7
CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2luc3RyZWFtX2luU3Ry
ZWFtLCBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1faW5TdHJlYW0sIGluc3RyZWFtX3NpemVf
aW5TdHJlYW0pOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0cmVhbV9pblN0cmVhbTsKCQl9
CgkJbWF4X3F1ZXVlX2lucHV0KGFjdGlvbnMsICJpblN0cmVhbSIsIHN0cmVhbV9wdHIsIGluc3Ry
ZWFtX3NpemVfaW5TdHJlYW0pOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZv
ciBzdHJlYW0gaW5TdHJlYW0gKi8KCQoJaW50NjRfdCB0bXBfMSA9IChwYXJhbV9OICogNCk7CgkK
CS8qIGNvZGUgZm9yIHN0cmVhbSBvdXRTdHJlYW0gKi8KCXNpemVfdCBvdXRzdHJlYW1fc2l6ZV9v
dXRTdHJlYW0gPSB0bXBfMTsKCWlmIChvdXRzdHJlYW1fc2l6ZV9vdXRTdHJlYW0gPiAwKSB7CgkJ
dWludDMyX3QgKnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX291dFN0
cmVhbTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IFR3b0RBdmVyYWdlVmFyaWFibGVfY2hl
Y2tfYWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX291dFN0cmVhbSkpKSB7CgkJ
CXVpbnQzMl90ICphbGlnbmVkX291dHN0cmVhbV9vdXRTdHJlYW0gPSBtYWxsb2Mob3V0c3RyZWFt
X3NpemVfb3V0U3RyZWFtKTsKCQkJaWYgKGFsaWduZWRfb3V0c3RyZWFtX291dFN0cmVhbSA9PSBO
VUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVf
XywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9yeSBmb3Ig
c3RyZWFtICdvdXRTdHJlYW0nIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0KCQkJKCZjYl9kYXRh
LT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAodWludDhfdCopIGludGVy
ZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fb3V0U3RyZWFtOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtj
Yl9kYXRhLT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50OF90KikgYWxpZ25lZF9vdXRzdHJl
YW1fb3V0U3RyZWFtOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXpl
ICAgICAgICA9IG91dHN0cmVhbV9zaXplX291dFN0cmVhbTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1b
Y2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAgPSAxOwoJCQljYl9kYXRhLT5jb3VudCArPSAx
OwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9vdXRzdHJlYW1fb3V0U3RyZWFtOwoJCX0KCQltYXhf
cXVldWVfb3V0cHV0KGFjdGlvbnMsICJvdXRTdHJlYW0iLCBzdHJlYW1fcHRyLCBvdXRzdHJlYW1f
c2l6ZV9vdXRTdHJlYW0pOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBz
dHJlYW0gb3V0U3RyZWFtICovCgkKCWlmICh1c2VfY2FsbGJhY2sgJiYgY2JfZGF0YS0+Y291bnQg
PT0gMCkgewoJCSpjYWxsYmFja19kYXRhID0gTlVMTDsKCQkqY2FsbGJhY2tfZnVuYyA9IE5VTEw7
CgkJZnJlZShjYl9kYXRhKTsKCX0KCXJldHVybiBhY3Rpb25zOwojdW5kZWYgQ0hFQ0tfRVJST1JT
Cn0KCnZvaWQgVHdvREF2ZXJhZ2VWYXJpYWJsZSgKCWludDMyX3QgcGFyYW1fTiwKCWxvbmcgb2Zm
c2V0X1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbnhvZmZzZXQsCgl1aW50NjRfdCBpbnNjYWxh
cl9Ud29EQXZlcmFnZVZhcmlhYmxlS2VybmVsX21hc2swLAoJdWludDY0X3QgaW5zY2FsYXJfVHdv
REF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9tYXNrMSwKCXVpbnQ2NF90IGluc2NhbGFyX1R3b0RBdmVy
YWdlVmFyaWFibGVLZXJuZWxfbWFzazIsCgl1aW50NjRfdCBpbnNjYWxhcl9Ud29EQXZlcmFnZVZh
cmlhYmxlS2VybmVsX21hc2szLAoJdWludDY0X3QgaW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJs
ZUtlcm5lbF9tYXNrNCwKCXVpbnQ2NF90IGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJu
ZWxfbWFzazUsCgl1aW50NjRfdCBpbnNjYWxhcl9Ud29EQXZlcmFnZVZhcmlhYmxlS2VybmVsX21h
c2s2LAoJdWludDY0X3QgaW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9tYXNrNywK
CXVpbnQ2NF90IGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazgsCgljb25z
dCB1aW50MzJfdCAqaW5zdHJlYW1faW5TdHJlYW0sCgl1aW50MzJfdCAqb3V0c3RyZWFtX291dFN0
cmVhbSkKewoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgVHdv
REF2ZXJhZ2VWYXJpYWJsZV9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxl
LCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsICk7CgltYXhfcnVuX3QgKnJ1biA9IFR3b0RBdmVy
YWdlVmFyaWFibGVfbm9uYmxvY2socGFyYW1fTiwgb2Zmc2V0X1R3b0RBdmVyYWdlVmFyaWFibGVL
ZXJuZWxfbnhvZmZzZXQsIGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazAs
IGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazEsIGluc2NhbGFyX1R3b0RB
dmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazIsIGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVL
ZXJuZWxfbWFzazMsIGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazQsIGlu
c2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazUsIGluc2NhbGFyX1R3b0RBdmVy
YWdlVmFyaWFibGVLZXJuZWxfbWFzazYsIGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJu
ZWxfbWFzazcsIGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazgsIGluc3Ry
ZWFtX2luU3RyZWFtLCBvdXRzdHJlYW1fb3V0U3RyZWFtKTsKCUNIRUNLX05VTEwocnVuLCAiVW5h
YmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAqVHdv
REF2ZXJhZ2VWYXJpYWJsZV9ub25ibG9jaygKCWludDMyX3QgcGFyYW1fTiwKCWxvbmcgb2Zmc2V0
X1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbnhvZmZzZXQsCgl1aW50NjRfdCBpbnNjYWxhcl9U
d29EQXZlcmFnZVZhcmlhYmxlS2VybmVsX21hc2swLAoJdWludDY0X3QgaW5zY2FsYXJfVHdvREF2
ZXJhZ2VWYXJpYWJsZUtlcm5lbF9tYXNrMSwKCXVpbnQ2NF90IGluc2NhbGFyX1R3b0RBdmVyYWdl
VmFyaWFibGVLZXJuZWxfbWFzazIsCgl1aW50NjRfdCBpbnNjYWxhcl9Ud29EQXZlcmFnZVZhcmlh
YmxlS2VybmVsX21hc2szLAoJdWludDY0X3QgaW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtl
cm5lbF9tYXNrNCwKCXVpbnQ2NF90IGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxf
bWFzazUsCgl1aW50NjRfdCBpbnNjYWxhcl9Ud29EQXZlcmFnZVZhcmlhYmxlS2VybmVsX21hc2s2
LAoJdWludDY0X3QgaW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9tYXNrNywKCXVp
bnQ2NF90IGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazgsCgljb25zdCB1
aW50MzJfdCAqaW5zdHJlYW1faW5TdHJlYW0sCgl1aW50MzJfdCAqb3V0c3RyZWFtX291dFN0cmVh
bSkKewoJVHdvREF2ZXJhZ2VWYXJpYWJsZV9hY3Rpb25zX3QgaW50ZXJmYWNlX2FjdGlvbnM7Cglp
bnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9OID0gcGFyYW1fTjsKCWludGVyZmFjZV9hY3Rpb25zLm9m
ZnNldF9Ud29EQXZlcmFnZVZhcmlhYmxlS2VybmVsX254b2Zmc2V0ID0gb2Zmc2V0X1R3b0RBdmVy
YWdlVmFyaWFibGVLZXJuZWxfbnhvZmZzZXQ7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnNjYWxhcl9U
d29EQXZlcmFnZVZhcmlhYmxlS2VybmVsX21hc2swID0gaW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJp
YWJsZUtlcm5lbF9tYXNrMDsKCWludGVyZmFjZV9hY3Rpb25zLmluc2NhbGFyX1R3b0RBdmVyYWdl
VmFyaWFibGVLZXJuZWxfbWFzazEgPSBpbnNjYWxhcl9Ud29EQXZlcmFnZVZhcmlhYmxlS2VybmVs
X21hc2sxOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtl
cm5lbF9tYXNrMiA9IGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazI7Cglp
bnRlcmZhY2VfYWN0aW9ucy5pbnNjYWxhcl9Ud29EQXZlcmFnZVZhcmlhYmxlS2VybmVsX21hc2sz
ID0gaW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9tYXNrMzsKCWludGVyZmFjZV9h
Y3Rpb25zLmluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazQgPSBpbnNjYWxh
cl9Ud29EQXZlcmFnZVZhcmlhYmxlS2VybmVsX21hc2s0OwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5z
Y2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5lbF9tYXNrNSA9IGluc2NhbGFyX1R3b0RBdmVy
YWdlVmFyaWFibGVLZXJuZWxfbWFzazU7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnNjYWxhcl9Ud29E
QXZlcmFnZVZhcmlhYmxlS2VybmVsX21hc2s2ID0gaW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJs
ZUtlcm5lbF9tYXNrNjsKCWludGVyZmFjZV9hY3Rpb25zLmluc2NhbGFyX1R3b0RBdmVyYWdlVmFy
aWFibGVLZXJuZWxfbWFzazcgPSBpbnNjYWxhcl9Ud29EQXZlcmFnZVZhcmlhYmxlS2VybmVsX21h
c2s3OwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zY2FsYXJfVHdvREF2ZXJhZ2VWYXJpYWJsZUtlcm5l
bF9tYXNrOCA9IGluc2NhbGFyX1R3b0RBdmVyYWdlVmFyaWFibGVLZXJuZWxfbWFzazg7CglpbnRl
cmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9pblN0cmVhbSA9IGluc3RyZWFtX2luU3RyZWFtOwoJaW50
ZXJmYWNlX2FjdGlvbnMub3V0c3RyZWFtX291dFN0cmVhbSA9IG91dHN0cmVhbV9vdXRTdHJlYW07
Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBUd29EQXZlcmFn
ZVZhcmlhYmxlX3N0YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhm
aWxlIHdhcyBub3QgbG9hZGVkIiwgTlVMTCk7Cgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVM
TDsKCXZvaWQgICpjYl9kYXRhICAgICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9u
cyA9IFR3b0RBdmVyYWdlVmFyaWFibGVfY29udmVydF9pbnRlcm5hbChzdG9yZWRfbWF4ZmlsZSwg
JmludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChh
Y3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlvbnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShh
Y3Rpb25zKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19T
VChzdG9yZWRfZW5naW5lLCBOVUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0g
TlVMTCkgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucyk7
Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9jYihzdG9yZWRfZW5naW5l
LCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxl
IHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7
CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKdm9pZCBUd29EQXZl
cmFnZVZhcmlhYmxlX3J1bigKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJVHdvREF2ZXJhZ2VWYXJp
YWJsZV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IFR3
b0RBdmVyYWdlVmFyaWFibGVfcnVuX25vbmJsb2NrKGVuZ2luZSwgaW50ZXJmYWNlX2FjdGlvbnMp
OwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQo
cnVuKTsKfQoKbWF4X3J1bl90ICpUd29EQXZlcmFnZVZhcmlhYmxlX3J1bl9ub25ibG9jaygKCW1h
eF9lbmdpbmVfdCAqZW5naW5lLAoJVHdvREF2ZXJhZ2VWYXJpYWJsZV9hY3Rpb25zX3QgKmludGVy
ZmFjZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2luZV9nZXRfbWF4
X2ZpbGUoZW5naW5lKTsgCgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpj
Yl9kYXRhICAgICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IFR3b0RBdmVy
YWdlVmFyaWFibGVfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywg
MSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0byBi
dWlsZCBhY3Rpb25zIiwgTlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19FUlJP
UlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5V
TEwpIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrKGVuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2Ug
ewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9jYihlbmdpbmUsIGFjdGlvbnMsIGNiX2Z1
bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMi
LCBOVUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoq
CiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50
ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4K
ICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKgog
KiBSdW4gdGhlIGFjdGlvbnMgb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdy
b3VwLgogKi8Kdm9pZCBUd29EQXZlcmFnZVZhcmlhYmxlX3J1bl9ncm91cChtYXhfZ3JvdXBfdCAq
Z3JvdXAsIFR3b0RBdmVyYWdlVmFyaWFibGVfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykK
ewoJbWF4X3J1bl90ICpydW4gPSBUd29EQXZlcmFnZVZhcmlhYmxlX3J1bl9ncm91cF9ub25ibG9j
ayhncm91cCwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8g
cnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAg
cnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZh
Y2UgJ2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdGhlIGFjdGlvbnMgdG8gcnVuIG9uIHRo
ZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cCBhbmQgcmV0dXJuIGltbWVkaWF0
ZWx5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gbXVzdCBiZSBjaGVja2VkIHdpdGggOjptYXhf
d2FpdC4gCiAqIE5vdGUgdGhhdCB1c2Ugb2YgOjptYXhfbm93YWl0IGlzIHByb2hpYml0ZWQgd2l0
aCBub24tYmxvY2tpbmcgcnVubmluZyBvbiBncm91cHM6CiAqIHNlZSB0aGUgOjptYXhfcnVuX2dy
b3VwX25vbmJsb2NrIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZXhwbGFuYXRpb24uCiAqCiAqIFxw
YXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2Fj
dGlvbnMgQWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlv
biBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1h
eF9ydW5fdCAqVHdvREF2ZXJhZ2VWYXJpYWJsZV9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dyb3Vw
X3QgKmdyb3VwLCBUd29EQXZlcmFnZVZhcmlhYmxlX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlv
bnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZ3JvdXBfZ2V0X21heF9maWxlKGdyb3Vw
KTsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBUd29EQXZlcmFnZVZhcmlhYmxlX2NvbnZlcnRf
aW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsIE5VTEwsIE5VTEwpOwoJaWYo
YWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3Jz
KSkgcmV0dXJuIE5VTEw7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CgltYXhfcnVuX3QgKnJ1biA9
IG1heF9ydW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGFjdGlvbnMpOwoJbWF4X2FjdGlvbnNfZnJl
ZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZh
bmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICog
XHBhcmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFy
YW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVu
LgogKgogKiBSdW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMu
ICBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zCiAqIG11c3QgbWF0Y2ggdGhlIHNpemUg
b2YgZW5nYXJyYXkuCiAqLwp2b2lkIFR3b0RBdmVyYWdlVmFyaWFibGVfcnVuX2FycmF5KG1heF9l
bmdhcnJheV90ICplbmdhcnJheSwgVHdvREF2ZXJhZ2VWYXJpYWJsZV9hY3Rpb25zX3QgKmludGVy
ZmFjZV9hY3Rpb25zW10pCnsKCW1heF9ydW5fdCAqcnVuID0gVHdvREF2ZXJhZ2VWYXJpYWJsZV9y
dW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGludGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05V
TEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCgov
KioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0
aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqCiAqIFNjaGVkdWxlIHRvIHJ1
biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcywgYW5kIHJldHVy
biBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucyBtdXN0IG1h
dGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gY2FuIGJl
IGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQgb3IgOjptYXhfbm93YWl0OwogKiBub3RlIHRo
YXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxsZWQsIHNvIHRoYXQgYXNzb2NpYXRlZCBtZW1v
cnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkg
b2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBh
cnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0
aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8K
bWF4X3J1bl90ICpUd29EQXZlcmFnZVZhcmlhYmxlX3J1bl9hcnJheV9ub25ibG9jayhtYXhfZW5n
YXJyYXlfdCAqZW5nYXJyYXksIFR3b0RBdmVyYWdlVmFyaWFibGVfYWN0aW9uc190ICppbnRlcmZh
Y2VfYWN0aW9uc1tdKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2FycmF5X2dldF9t
YXhfZmlsZShlbmdhcnJheSwgMCk7CglpbnQgaTsKCW1heF9hY3RhcnJheV90ICphY3RhcnJheSA9
IG1heF9hY3RhcnJheV9pbml0KG1heGZpbGUsIGVuZ2FycmF5LT5zaXplKTsKCWlmIChhY3RhcnJh
eSA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCW1heF9hY3Rpb25zX3QgKiphcnJfYWN0aW9ucyA9IG1h
bGxvYyhlbmdhcnJheS0+c2l6ZSAqIHNpemVvZihtYXhfYWN0aW9uc190KikpOwoJZm9yICggaSA9
IDAgOyBpIDwgYWN0YXJyYXktPnNpemU7IGkrKyApIHsKCQltYXhfYWN0aW9uc190ICphY3Rpb25z
ID0gVHdvREF2ZXJhZ2VWYXJpYWJsZV9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFj
ZV9hY3Rpb25zW2ldLCAxLCBOVUxMLCBOVUxMKTsKCQlpZiAoYWN0aW9ucyA9PSBOVUxMKSByZXR1
cm4gTlVMTDsKCQlhcnJfYWN0aW9uc1tpXSA9IGFjdGlvbnM7CgkJbWF4X3NldF9hY3Rpb24oYWN0
YXJyYXksIGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X25v
bmJsb2NrKGVuZ2FycmF5LCBhY3RhcnJheSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+
c2l6ZSA7IGkrKyApIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1tpXSk7IH0KCW1heF9h
Y3RhcnJheV9mcmVlKGFjdGFycmF5KTsKCWZyZWUoYXJyX2FjdGlvbnMpOwoJcmV0dXJuIHJ1bjsK
fQoKCi8qKgogKiBcYnJpZWYgQ29udmVydHMgYSBzdGF0aWMtaW50ZXJmYWNlIGFjdGlvbiBzdHJ1
Y3QgaW50byBhIGR5bmFtaWMtaW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3RydWN0LgogKgogKiBO
b3RlIHRoYXQgdGhpcyBpcyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkgb3Ro
ZXIgZnVuY3Rpb25zIGluIHRoZSBzdGF0aWMgaW50ZXJmYWNlLgogKgogKiBccGFyYW0gW2luXSBt
YXhmaWxlIFRoZSBtYXhmaWxlIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlv
bnMgVGhlIGludGVyZmFjZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBUaGUg
ZHluYW1pYy1pbnRlcmZhY2UgYWN0aW9ucyB0byBydW4sIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJv
ci4KICovCm1heF9hY3Rpb25zX3QqIFR3b0RBdmVyYWdlVmFyaWFibGVfY29udmVydChtYXhfZmls
ZV90ICptYXhmaWxlLCBUd29EQXZlcmFnZVZhcmlhYmxlX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2Fj
dGlvbnMpCnsKCXJldHVybiBUd29EQXZlcmFnZVZhcmlhYmxlX2NvbnZlcnRfaW50ZXJuYWwobWF4
ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDAsIE5VTEwsIE5VTEwpOwp9CgojdW5kZWYgQ0hFQ0tf
RVJST1JTX1NUCiN1bmRlZiBDSEVDS19OVUxMCgoK
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 84, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 159, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 158, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 157, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 112, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 145, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 156, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 122, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 147, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 109, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 61, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 114, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 148, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 62, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 142, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 146, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 56, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 58, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 155, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 113, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 115, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 54, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 53, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 160, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 99, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 119, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 150, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 154, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 121, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 105, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 123, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 126, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 66, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 127, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 128, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 130, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 151, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 69, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 132, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 133, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 72, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 135, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 136, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 137, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 138, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 139, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 78, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 140, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 141, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 80, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 143, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 149, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 81, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 153, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 92, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 152, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 95, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 98, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(TwoDAverageVariableKernel, 96, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02144621731d1fd8a1e021243d5849e0dcc3dfb49c4c02146da5ab9e48a6cd06347c1ca5fa69a8fb94f63bca")
#endif

